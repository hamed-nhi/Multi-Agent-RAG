# graph/state.py
from typing import TypedDict, Literal, Optional, Any

class GraphState(TypedDict):
    """
    Represents the state of our graph, including fields for query refinement.
    """
    # --- Original fields ---
    query: str 
    # Current data source targeted by the query_generator or query_refiner
    data_source: Optional[Literal["sqlite", "mongodb", "meilisearch", "neo4j", "end", "general"]] 
    # The query (SQL, JSON string, Cypher, search string) to be executed
    generated_query: Optional[str] 
    # Result from the database query execution
    context: Optional[Any] 
    # Final natural language response for the user
    response: Optional[str]
    # To store any error messages during the process
    error: Optional[str]
    
    
    
   # --- Fields for query refinement workflow ---
    original_user_query: Optional[str] # Stores the very first user query that initiated this flow
    initial_generated_query: Optional[str] # Stores the first query generated by a specialized agent before any refinement
    last_failed_query: Optional[str] # Stores the most recent query that failed (e.g., returned empty results)
    needs_query_refinement: bool # Flag set by query_executor if refinement is needed
    refinement_attempt_count: int # Counter for how many refinement attempts have been made for the current original_user_query
    
    
    
    # --- Fields for clarification workflow ---
    clarification_question_needed: bool
    clarification_question_text: Optional[str]
    user_clarification_response: Optional[str]
    original_query_before_clarification: Optional[str]